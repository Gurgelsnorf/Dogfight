#lang racket

(define £c1_br (cons 2 2))
(define £c1_bl (cons 6 2))
(define £c1_tr (cons 2 6))
(define £c1_tl (cons 6 6))

(define £c2_br (cons 1 1))
(define £c2_bl (cons 3 1))
(define £c2_tr (cons 1 3))
(define £c2_tl (cons 3 3))

(define £c3_br (cons 1 7))
(define £c3_bl (cons 2 7))
(define £c3_tr (cons 1 9))
(define £c3_tl (cons 2 9))

(define £c4_br (cons 10 2))
(define £c4_bl (cons 11 2))
(define £c4_tr (cons 10 3))
(define £c4_tl (cons 11 3))


(define ($Print_Corners br bl tr tl)
  (printf "----------------------------~%|")
  (display tr)
  (printf "            ")
  (display tl)
  (printf "|
|                          |
|                          |
|                          |
|")
  (display br)
  (printf "            ")
  (display bl)
  (printf "|
----------------------------"))

(define £list_of_corners (list £c1_br £c2_br £c3_br £c4_br
                              £c1_bl £c2_bl £c3_bl £c4_bl
                              £c1_tr £c2_tr £c3_tr £c4_tr
                              £c1_tl £c2_tl £c3_tl £c4_tl))

(define £list_of_x_values (map (lambda (element) (car element))
                              £list_of_corners))

(define £list_of_y_values (map (lambda (element) (cdr element))
                              £list_of_corners))

(define ($Test_Print_Corners)
  ($Print_Corners £c1_br £c1_bl £c1_tr £c1_tl))


(define £sorted_list_of_corners (sort £list_of_x_values <)) 
